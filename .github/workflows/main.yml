name: Test and build all platforms

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: false

jobs:

  setup:
    name: Setup
    runs-on: self-hosted

    steps:
      # Ensure Git LFS is installed
      - name: Install Git LFS
        run: sudo apt-get update && sudo apt-get install git-lfs

      # Ensure Docker is installed
      - name: Install Docker
        run: sudo apt-get update && sudo apt-get install -y docker.io

      # Ensure Git is installed
      - name: Install Git
        run: sudo apt-get update && sudo apt-get install git

  testAllModes:
    needs: setup
    name: Test in ${{ matrix.testMode }}
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - playmode
          - editmode
    steps:

      # Checkout
      - uses: actions/checkout@v4
        with:
          lfs: true

      # Cache
      - uses: JackSinkoRB/local-cache@main
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      # Test
      - uses: game-ci/unity-test-runner@v4
        id: tests
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
          customParameters: -nographics
          dockerMemoryLimit: 7500m
          dockerCpuLimit: 2

  build:
    needs: testAllModes
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - Android
          - StandaloneWindows
    steps:

      # Checkout
      - uses: actions/checkout@v4
        with:
          lfs: true

      # Cache
      - uses: JackSinkoRB/local-cache@main
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      # Build
      - uses: game-ci/unity-builder@v4
        id: buildStep
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          dockerMemoryLimit: 7500m
          dockerCpuLimit: 2
          buildName: 'Gumball'

      # Zip Build Files
      - name: Zip Build Files
        run: |
          find build/${{ matrix.targetPlatform }} -type d -name 'DoNotShip*' -exec rm -rf {} \; #delete folders with 'DoNotShip' before moving
          zip -r Gumball-${{ matrix.targetPlatform }}.zip build/${{ matrix.targetPlatform }}

      # Move Build Files
      - name: Move Build Files
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: mv Gumball-${{ matrix.targetPlatform }}.zip /var/www/html

      # Delete build folder to save space
      - name: Delete build folder
        run: rm -rf build

  deploy:
    needs: build
    name: Deploy
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:

      # Get all the commits
      - name: Calculate fetch-depth and get commit messages
        id: pre-checkout
        env:
          COMMITS: ${{ toJson(github.event.commits) }}
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            COUNT=$(( $(echo "$COMMITS" | jq length) ))
            COMMIT_MESSAGES=""
            for ((i=0; i<$COUNT; i++)); do
                # Get commit message and truncate at the first occurrence of '\n'
                COMMIT_MESSAGE=$(echo "$COMMITS" | jq -r .[$i].message | sed 's/\\n.*//')
                COMMIT_MESSAGES+="$((i+1)). $COMMIT_MESSAGE\\n"
            done
          else
            COUNT=1
            # Get commit message and truncate at the first occurrence of '\n'
            COMMIT_MESSAGE=$(echo "$COMMITS" | jq -r .[0].message | sed 's/\\n.*//')
            COMMIT_MESSAGES="$COMMIT_MESSAGE\\n"
          fi
          echo "number-of-commits=$COUNT" >> "$GITHUB_OUTPUT"
          echo "commit-messages=$COMMIT_MESSAGES" >> "$GITHUB_OUTPUT"

      # Get short commit hash
      - uses: benjlevesque/short-sha@v2.1
        id: short-sha
        with:
          length: 7

      # Send Discord notification
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_EMBEDS: |
            [{
              "title": "Gumball has a new build available.",
              "fields": [
                { "name": "Android", "value": "[Download](http://178.16.143.69/Gumball-Android.zip)", "inline": true },
                { "name": "Windows", "value": "[Download](http://178.16.143.69/Gumball-StandaloneWindows.zip)", "inline": true },
                { "name": "Latest commit", "value": "[${{ env.SHA }}](https://github.com/${{github.repository}}/commit/${{github.sha}})" },
                { "name": "Commits (${{ steps.pre-checkout.outputs.number-of-commits }})", "value": "${{ steps.pre-checkout.outputs.commit-messages }}" }
              ],
              "footer": {"text": "Committed by ${{github.event.head_commit.author.name}}"}
            }]
        uses: Ilshidur/action-discord@0.3.2